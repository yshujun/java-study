/**
 * 数据类型
 * */
public class DataType{
    public static void main() throws Exception{
        System.out.println("DataType类执行了 (数据类型)");
        String[] arr = {
            "关于java中的数据类型",
            "1.数据类型的作用是什么?",
            "   程序当中有很多数据,每个数据都是有相关的数据类型,不同的数据类型的数据占用的空间大小不同,数据类型的作用是指导JVM在运行程序的时候给改数据分配多大的内存空间。",
            "2、java中的数据类型包括两种",
            "   * 基本数据类型",
            "   * 引用数据类型",
            "3、关于基本数据类型",
            "   * 基本数据类型包括4大类8小种:",
            "第一类: 整数型",
            "   byte,short,int,long",
            "第二类: 浮点型",
            "   float,double",
            "第三类: 布尔型",
            "   boolean",
            "第四类: 字符型",
            "   char",
            "4、字符串\"abc\"不属于基本数据类型,属于\"引用数据类型\",字符属于基本数据类型:",
            "   * 字符串使用双引号 \"abc\"",
            "   * 字符使用单引号   'a'",
            "5、八种数据类型各自占用空间大小是多少？",
            "   基本数据类型              占用空间大小【单位字节】",
            "   ----------------------------------",
            "   byte                    1",
            "   short                   2",
            "   int                     4",
            "   long                    8",
            "   float                   4",
            "   double                  8",
            "   boolean                 1",
            "   char                    2",
            "6、计算机在任何情况下都只能识别二进制。例如: 只认识10......",
            "   现代计算机底层采用交流电的方式,接通和断开就两种状态,计算机只识别1和0",
            "7、什么是二进制?",
            "   * 数据的表现形式。 十进制表示满十进一原则,二进制表示满二进一原则",
            "   例如: 十进制",
            "       0 1 2 3 4 5 6 7 8 9 10 12 13",
            "       0 1 10 11 100 101 110 111",
            "8、字节(byte):",
            "   1Byte = 8 bit",
            "   1KB = 1024Byte",
            "   1MB = 1024KB",
            "   1GB = 1024MB",
            "   1TB = 1024GB",
            "9、整数型当中Byte类型,占用一个字节,所以byte占用8个比特位, 那么byte的取值范围是什么?",
            "   * 关于java中的数据类型, 数字都是有正负之分的, 所以在数字的二进制当中有一个二进制位被称为\"符号位\"。并且这个\"符号位\"在所有二进制的最左边, 0表示正数, 1表示负数。",
            "   * byte类型最大值为01111111",
            "10、二进制和十进制的转换",
            "11、计算机只认识二进制,那么计算机是怎么表示现实世界当中文字呢？",
            "   * 八种数据类型当中, byte、short、int、long、float、double、boolean这7种数据类型计算机在表示的时候比较容易, 因为底层都是数字, 十进制和二进制之间存在固定的转换规则",
            "   * 但是八种数据类型当中char类型表示的是现实事件当中的文字, 文字和计算机二进制之间是默认不存在任何转换关系的",
            "   * 为了让计算机可以表示现实世界当中的文字, 我们需要进行人为的干涉, 需要人负责提前制定好文字和二进制之前的对照关系, 这种对照转换关系被称为: 字符编码",
            "   * 计算机最初只支持英文, 最早出现的字符编码是ASCII码",
            "       'a' --> 97          01100001",
            "       'A' --> 65",
            "       '0' --> 48",
            "       'a' --(按照ASCII解码)-->  01100001",
            "       01100001 --(按照ASCII编码)--> 'a'",
            "       编码和解码采用同一套字典/对照表, 不会乱码; 采用不同字典/对照表会出现乱码",
            "   * 随着计算机的发展, 后来出现了一种编码方式, 是国际化标准组织ISO制定的, 这种编码方式支持西欧语言, 向上兼容ACSII码,任然不支持中文。这种编码方式是: ISO-8859-1, 又被称为latin-1.",
            "   * 随着计算机开始向亚洲发展, 计算机开始支持中文等国家文字, 其中支持中文简体的编码方式: GB2312 < GBK < GB18030",
            "   * 支持繁体中文: 大五码<big5>",
            "   * 后来有一种编码方式统一了全球所有的文字, 容量较大, 这种编码方式叫做: unicode编码unicode编码方式有很多种具体的实现: ",
            "       - UTF-8",
            "       - UTF-16",
            "       - UTF-32",
            "       ......",
            "   * java语言源代码采用的是unicode编码方式, 所有\"标识符\"可以用中文",
            "   * 现在在实际开发中, 一般使用UTF-8编码方式较多。【统一编码方式】",
            "关于8种数据类型默认值",
            "数据类型                           默认值",
            "------------------------------------------",
            "byte,short,int,long                0",
            "float,double                       0.0",
            "boolean                            false",
            "char                               \u0000",
            "8种数据类型默认值一切向0看齐。",
            "反斜杠 \\ 在java语言当中具有转译功能",
            "所有想输出反斜杠 \\ 需要写两个反斜杠前面的反斜杠把后面的反斜杠转译成普通的反斜杠字符",
            "System.out.println()和System.out.print()的区别: println表示输出之后换行, print表示输出但不换行",
            "关于java数据类型中的整数型",
            "数据类型        占用空间大小           默认值                 取值范围",
            "---------------------------------------------------------------------------",
            "byte             1                  0                  [-128 ~ 127]",
            "short            2                  0                  [-32768 ~ 32767]",
            "int              4                  0                  [-2147483648 ~ 2147483647]",
            "long             8                  0L",
            "1、java语言当中的\"整数型字面值\"被默认当作int类型处理。要让这个\"整数型字面值\"被当作long类型来处理的话,需要在\"整数型字面值\"后面加上l/L,建议使用大写的L",
            "2、java语言当中的整数型字面值有三种表示方式:",
            "   第一种方式: 十进制[是一种缺省默认的方式]",
            "   第二种方式: 八进制[在编写八进制整数型字面值的时候需要以0开始]",
            "   第三种方式: 十六进制[在编写十六进制整数型字面值的时候需要以0x开始]",
            "       * 缺省 一种默认方式。 八进制整数型字面值的时候需要以0开始 十六进制整数型字面值的时候需要以0x开始, 缺省是不需要以0或者0x开始",
            "       * 整数型字面值默认当作int类型处理, 大于2147483647会报错: 过大的整数",
            "       * long类型可以存储大于2147483647的数 需要在数字后面加L",
            "   * 小容量的类型可以直接赋值给大容量, 它会自己转化",
            "   * 大容量转换成小容量,需要强制类型转换",
            "   * 强制类型转换需要加“强制类型转换符”",
            "   * 加上强制类型转换符之后编译通过, 但是运行阶段可能损失精度",
            "   * 所以强制类型转换需要谨慎使用, 因为损失精度后可能损失很严重",
            "强制转换数据原理:",
            "   原始数据: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01100100",
            "   强制转换之后的数据 00000000 00000000 00000000 01100100",
            "   将左边的数据砍掉【所有的数据强制转换都是这样完成的】",
            "   long k = 2147483648L; int e = (int)k; e的值变为-2147483648 缺失精度严重",
            "   byte类型可以直接写 byte a = 123; 它会自己转换不需要强制转换。 超出byte取值范围会报错(byte a = 128), 使用强制转换符不会报错但是会损失精度",
            "计算机二进制有三种表示形式: 原码、反码、补码",
            "   计算机在任何情况下底层表示和存储数据的时候采用了补码形式。",
            "   正数的补码: 和原码相同",
            "   负数的补码: 负数的绝对值对应的二进制码所有二进制位取反，再加1",
            "   补码: 10000000",
            "   原码计算过程:",
            "       * 10000000 - 1 ==> 01111111",
            "关于浮点型数据类型",
            "   float: 单精度【4个字节】",
            "   double: 双精度【8个字节, 精度较高】",
            "double的精度太低【相对来说】, 不适合做财务软件。 0.00000 小数点后位数越多精度越高, 财务涉及到钱的问题, 所以Sun在基础SE类库当中为程序员准备了精确度更高的类型, 只不过这种类型是一种引用数据类型, 不属于基本数据类型, 它是: java.math.BigDecimal",
            "其实java程序当中SUN提供了一套庞大的类库, java程序员是基于这套基础的类库来进行开发的, 所以要知道java的SE类库的字节码在哪儿？",
            "   * SE类库字节码: C:\\Program Files\\Java\\jdk1.8.0_181\\jre\\lib\\rt.jar",
            "   * SE类库源码: C:\\Program Files\\Java\\jdk1.8.0_181\\src.zip",
            "   * 例如String.java和String.class",
            "浮点型数据默认为double类型的数据, float类型需要在后面加f/F, 或者强制转换",
            "关于布尔型数据类型",
            "   Boolean",
            "在java语言当中Boolean只有两个值: true false, 没有其它值",
            "不像c语言 0 1可以表示真假",
            "在底层存储的时候Boolean占用1个字节,因为事件存储的时候false底层是0, true底层是1",
            "布尔类型在实际开发当中非常重要, 经常使用在逻辑运算和条件控制语句当中",
            "关于基本数据类型之间的转换: 转换规则",
            "   1、八种基本数据类型当中除布尔类型之外, 剩下的7种数据类型之间都可以互相转换",
            "   2、小容量向大容量转换, 称为自动类型转换, 容量从小到大排序:",
            "       byte < short < int < long < float < double < char",
            "       注: 任何浮点类型不管占多少个字节, 都比整数型容量大。",
            "       char和short可表示的种类数量相同, 但是char可以取更大的正整数",
            "   3、大容量转换成小容量, 叫做强制类型转换, 需要加强制类型转换符, 程序才能编译通过, 但是运行阶段可能会损失精度, 所以谨慎使用。",
            "   4、当整数字面值没有超出byte, short, char的取值范围, 可以之间赋值给byte, short, char类型的变量。",
            "   5、byte、short、char混合运算的时候, 各自先转换为int类型再运算",
            "   6、多种数据类型混合运算, 先转换成容量最大的那种类型再做运算。",
        };

        for (String i: arr) System.out.println(i);
        System.out.print(123);
        System.out.print('\t');
        System.out.print(456);
        System.out.print('\\');
        System.out.print("运算,数据类型运算");
        long x = 100L;
        int y = (int)x;
        System.out.println(y);
        float a = (float) 10 / (float) 3;
        double b = (double) 10 / (double) 3;
        System.out.println(a);
        System.out.println(b);
        byte c = (byte)(10/3);
        System.out.println(c);
    }
}